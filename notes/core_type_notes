***TYPE CHECKING***
when having union or unknown types, type checking must occur, cases where different types are handled with logic

ie)
where userInput = unknown type
where userName = string type

userName = userInput <== this errors

if (typeof name === 'string) userName = userInput <== this doesn't error

***TUPLE***
assigning a tuple type can be broken with the usage of push

ie) const x:[number, string] = [3, 'test']
x.push('test2') <== passes with no errors even though a tuple should not allow this

***ENUM***
enum "name" => allows a readable mapping of an identifier 
ie) enum Role {ADMIN, READ_ONLY, AUTHOR}

ADMIN = 1
READ_ONLY = 2
AUTHOR = 3

can also define what you want each identifer to be, if not it naturally starts from 1 and increments from there.

***UNION***
Union types must be carefully thought of in terms of logic, as different scenarios of explicit union definition may result in ts complaining 

ie) input1: number | string, input2: number | string

result = input1 + input2 <== an error is thrown despite it not being wrong, treats the plus as incorrect due to string existing as well, fix this by forcing inference to interpret as number when it is a number

***LITERAL***
Literal <== can force a variable to be a particular value/other values with the "|" operator

**VERY USEFUL FOR DRY, ESP COMPLEX OBJECTS**
Type Alias <== custom defining of types
ie) 
Type Combinable = string | number;
Type Specific = 'as-text' | 'as-number';

***RETURN TYPES***
Return types can also be explicit in functions
ie) function add(n1: number, n2: number): string {
  return n1 + n2 <== ts errors
};

function add(n1: number, n2: number): string {
  return n1.toString() + n2.toString() <== ts no longer errors
};

result would enforce a string as ts expects a string to return

if a function returns nothing, ts expects a 'void' type to be returned

***FUNCTION TYPES***
can define parameters and expected output in a function

***UNKNOWN***
used when a user input's something that we do not know. More strict than ANY, as unknown still has ts' static checking 

***NEVER***
a function return type
typically used in functions like error generators or utility functions that halt your script and doesn't return ANYTHING

***CLASSES***

  ***THIS TYPE***
  you can use the type 'this' in classes to inform ts the method belongs to which class

  ie )

  class Devices {
    constructor() {
      this.name = name
    }

    describe(this: Devices) { <== this method's this always belongs to Devices and ts will throw an error if it isn't 
      console.log(`Department: ${this.name}`)
    }
  }

  ***PRIVATE (MODIFIER)***
  private is a modifier in classes that enforce a ts static check of methods being used only within the class and not externally

  ***PROTECTED (MODIFIER)***
  protected is like private, but can also allow extended classes to access the attribute. Private does not allow extended classes to do so

  ***SHORTHAND***
  in type defintions of the constructor, a short hand is possible

  ie) 
  constructor(
    private id: string,
    public name: string
  )

  is the same as below

  private id: string;
  name: string;

  constructor(id: string, name: string) {
    this.name = name,
    this.string = string
  }

  ***READONLY (MODIFIER)***
  readonly is a modifier in classes that enforce a ts static check of something not changing after its initialization

  ***INHERITANCE***
  remember, if you extend a class, you must call super before assigning any properties to the class inheriting anything.
  - also super can be called inside a constructor method to access the old constructor

  - you can also overwrite existing class methods with more nuanced logic in the extended class; use the same method name from the base class

  ***STATIC METHODS/PROPERTIES (TYPICALLY USED AS A UTILITY FUNCTION)***
  global methods defined based and accessible on the class, not on the instance. Call static before a class method to do so.

  ie) static createEmployee(name: string) {
    return {
      name: name;
    }
  };

  to access static methods/properties inside the actual class, you would need to refer to the class and static method/property accordingly

  ie)
  class Department {
    
  }

